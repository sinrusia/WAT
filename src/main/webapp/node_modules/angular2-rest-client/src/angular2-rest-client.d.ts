import { Http, ResponseContentType, QueryEncoder } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/share';
import 'rxjs/add/operator/shareReplay';
export declare class PassThroughQueryEncoder extends QueryEncoder {
    encodeKey(k: string): string;
    encodeValue(v: string): string;
}
export declare function standardEncoding(v: any): string;
export declare abstract class AbstractApiClient {
    protected http: Http;
    constructor(http: Http);
}
export declare function BaseUrl(url: (() => Observable<string>) | string, configKey?: string): <TClass extends new (...args: any[]) => AbstractApiClient>(Target: TClass) => TClass;
export declare function Headers(headers: {}): {
    <TClass extends new (...args: any[]) => AbstractApiClient>(target: TClass): TClass;
    (target: Object, targetKey: string | symbol): void;
};
export declare function Query(keyOrParams: any, ...extraOptions: any[]): {
    <TClass extends new (...args: any[]) => AbstractApiClient>(target: TClass): TClass;
    (target: Object, propertyKey?: string | symbol, parameterIndex?: number): any;
};
export declare function Type(arg: ResponseContentType): (target: Object, targetKey?: string | symbol) => void;
export declare function Cache(arg: number): (target: Object, targetKey?: string | symbol) => void;
export declare function Error(handler: (...args: any[]) => any): <TClass extends new (...args: any[]) => AbstractApiClient>(target: TClass) => TClass;
export declare var Path: (key?: string, ...extraOptions: any[]) => (target: AbstractApiClient, propertyKey: string | symbol, parameterIndex: number) => void;
export declare var Body: (key?: string, ...extraOptions: any[]) => (target: AbstractApiClient, propertyKey: string | symbol, parameterIndex: number) => void;
export declare var Header: (key?: string, ...extraOptions: any[]) => (target: AbstractApiClient, propertyKey: string | symbol, parameterIndex: number) => void;
export declare var GET: (url?: string) => (target: AbstractApiClient, targetKey?: string | symbol, descriptor?: PropertyDescriptor) => PropertyDescriptor;
export declare var POST: (url?: string) => (target: AbstractApiClient, targetKey?: string | symbol, descriptor?: PropertyDescriptor) => PropertyDescriptor;
export declare var PUT: (url?: string) => (target: AbstractApiClient, targetKey?: string | symbol, descriptor?: PropertyDescriptor) => PropertyDescriptor;
export declare var DELETE: (url?: string) => (target: AbstractApiClient, targetKey?: string | symbol, descriptor?: PropertyDescriptor) => PropertyDescriptor;
export declare var HEAD: (url?: string) => (target: AbstractApiClient, targetKey?: string | symbol, descriptor?: PropertyDescriptor) => PropertyDescriptor;
export declare var OPTIONS: (url?: string) => (target: AbstractApiClient, targetKey?: string | symbol, descriptor?: PropertyDescriptor) => PropertyDescriptor;
export declare var PATCH: (url?: string) => (target: AbstractApiClient, targetKey?: string | symbol, descriptor?: PropertyDescriptor) => PropertyDescriptor;
export declare const NO_ENCODE: symbol;
