var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import { Inject } from '@angular/core';
import { Headers as NgHeaders, Http, Request, RequestMethod, RequestOptions, URLSearchParams, QueryEncoder } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/share';
import 'rxjs/add/operator/shareReplay';
var Reflect = global['Reflect'];
var PassThroughQueryEncoder = (function (_super) {
    __extends(PassThroughQueryEncoder, _super);
    function PassThroughQueryEncoder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PassThroughQueryEncoder.prototype.encodeKey = function (k) { return k; };
    PassThroughQueryEncoder.prototype.encodeValue = function (v) { return v; };
    return PassThroughQueryEncoder;
}(QueryEncoder));
export { PassThroughQueryEncoder };
export function standardEncoding(v) {
    return encodeURIComponent(v)
        .replace(/%40/gi, '@')
        .replace(/%3A/gi, ':')
        .replace(/%24/gi, '$')
        .replace(/%2C/gi, ',')
        .replace(/%3B/gi, ';')
        .replace(/%2B/gi, '+')
        .replace(/%3D/gi, '=')
        .replace(/%3F/gi, '?')
        .replace(/%2F/gi, '/');
}
function isObject(item) {
    return (item && typeof item === 'object' && !Array.isArray(item) && item !== null);
}
function extend(target, source) {
    if (!isObject(target) || !isObject(source))
        return target;
    Object.keys(source).forEach(function (key) {
        if (isObject(source[key])) {
            if (!target[key])
                Object.assign(target, (_a = {}, _a[key] = {}, _a));
            extend(target[key], source[key]);
        }
        else
            Object.assign(target, (_b = {}, _b[key] = source[key], _b));
        var _a, _b;
    });
    return target;
}
var AbstractApiClient = (function () {
    function AbstractApiClient(http) {
        this.http = http;
    }
    return AbstractApiClient;
}());
export { AbstractApiClient };
AbstractApiClient.ctorParameters = function () { return [
    { type: Http, decorators: [{ type: Inject, args: [Http,] },] },
]; };
var MetadataKeys = {
    Query: Symbol('apiClient:Query'),
    Path: Symbol('apiClient:Path'),
    Body: Symbol('apiClient:Body'),
    Header: Symbol('apiClient:Header'),
    Type: Symbol('apiClient:ResponseType'),
    Error: Symbol('apiClient:Error'),
    Cache: Symbol('apiClient:Cache')
};
export function BaseUrl(url, configKey) {
    return function (Target) {
        if (url instanceof Function)
            Target.prototype.getBaseUrl = url;
        else if (configKey) {
            var cached_1;
            Target.prototype.getBaseUrl = function () {
                var x = !cached_1 ? (cached_1 = this.http.get(url).map(function (r) { return r.json()[configKey]; }).share()) : cached_1;
                return x;
            };
        }
        else
            Target.prototype.getBaseUrl = function () { return Observable.fromPromise(Promise.resolve(url)); };
        return Target;
    };
}
export function Headers(headers) {
    function decorator(target, targetKey) {
        var metadataKey = MetadataKeys.Header;
        if (targetKey !== undefined) {
            var existingHeaders = Reflect.getOwnMetadata(metadataKey, target, targetKey) || [];
            existingHeaders.push({ index: undefined, key: headers });
            Reflect.defineMetadata(metadataKey, existingHeaders, target, targetKey);
        }
        else {
            var existingHeaders = Reflect.getOwnMetadata(metadataKey, target) || [];
            existingHeaders.push({ index: undefined, key: headers });
            Reflect.defineMetadata(metadataKey, existingHeaders, target, undefined);
        }
    }
    return decorator;
}
export function Query(keyOrParams) {
    var extraOptions = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        extraOptions[_i - 1] = arguments[_i];
    }
    function decorator(target, propertyKey, parameterIndex) {
        if (parameterIndex !== undefined) {
            var metadataKey = MetadataKeys.Query;
            var existingParams = Reflect.getOwnMetadata(metadataKey, target, propertyKey) || [];
            existingParams.push(__assign({ index: parameterIndex, key: keyOrParams }, extraOptions));
            Reflect.defineMetadata(metadataKey, existingParams, target, propertyKey);
        }
        else {
            var metadataKey = MetadataKeys.Query;
            var existingQuery = Reflect.getOwnMetadata(metadataKey, target) || [];
            existingQuery.push({ index: undefined, key: keyOrParams });
            Reflect.defineMetadata(metadataKey, existingQuery, target, undefined);
            return target;
        }
    }
    return decorator;
}
export function Type(arg) {
    return function decorator(target, targetKey) {
        Reflect.defineMetadata(MetadataKeys.Type, arg, target, targetKey);
    };
}
export function Cache(arg) {
    return function decorator(target, targetKey) {
        Reflect.defineMetadata(MetadataKeys.Cache, arg, target, targetKey);
    };
}
export function Error(handler) {
    function decorator(target) {
        Reflect.defineMetadata(MetadataKeys.Error, handler, target);
        return target;
    }
    return decorator;
}
var buildParamDeco = function (paramDecoName) {
    return function (key) {
        var extraOptions = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            extraOptions[_i - 1] = arguments[_i];
        }
        return function (target, propertyKey, parameterIndex) {
            var metadataKey = MetadataKeys[paramDecoName];
            var existingParams = Reflect.getOwnMetadata(metadataKey, target, propertyKey) || [];
            existingParams.push(__assign({ index: parameterIndex, key: key }, extraOptions));
            Reflect.defineMetadata(metadataKey, existingParams, target, propertyKey);
        };
    };
};
export var Path = buildParamDeco('Path');
export var Body = buildParamDeco('Body');
export var Header = buildParamDeco('Header');
var cacheMap = new Map;
var buildMethodDeco = function (method) {
    return function (url) {
        if (url === void 0) { url = ''; }
        return function (target, targetKey, descriptor) {
            descriptor.value = function () {
                var _this = this;
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var requestUrl = url;
                if (this.http === undefined)
                    throw new TypeError("Property 'http' missing in " + this.constructor + ". Check constructor dependencies!");
                var defaultQueryParams = Reflect.getOwnMetadata(MetadataKeys.Query, target.constructor), queryParams = Reflect.getOwnMetadata(MetadataKeys.Query, target, targetKey), query = new URLSearchParams('', new PassThroughQueryEncoder());
                defaultQueryParams && defaultQueryParams.forEach(function (defaQuery) {
                    var _q = extend({}, defaQuery);
                    for (var _qk in _q.key) {
                        if (typeof _q.key[_qk] === 'function')
                            _q.key[_qk] = _q.key[_qk].call(_this);
                        query.set(_qk, _q.key[_qk]);
                    }
                });
                queryParams && queryParams.filter(function (p) { return args[p.index] !== undefined; })
                    .forEach(function (p) {
                    var queryKey, queryVal;
                    if (Object.values(p).indexOf(NO_ENCODE) !== -1)
                        _a = [p.key, args[p.index]], queryKey = _a[0], queryVal = _a[1];
                    else
                        _b = [standardEncoding(p.key), standardEncoding(args[p.index])], queryKey = _b[0], queryVal = _b[1];
                    return query.set(queryKey, queryVal);
                    var _a, _b;
                });
                var pathParams = Reflect.getOwnMetadata(MetadataKeys.Path, target, targetKey);
                pathParams && pathParams.filter(function (p) { return args[p.index] !== undefined; })
                    .forEach(function (p) { return requestUrl = requestUrl.replace("{" + p.key + "}", args[p.index]); });
                var _headers = {}, defaultHeaders = Reflect.getOwnMetadata(MetadataKeys.Header, target.constructor), methodHeaders = Reflect.getOwnMetadata(MetadataKeys.Header, target, targetKey);
                defaultHeaders && defaultHeaders.forEach(function (header) {
                    var _h = extend({}, header);
                    for (var _hk in _h.key)
                        if (typeof _h.key[_hk] === 'function')
                            _h.key[_hk] = _h.key[_hk].call(_this);
                    extend(_headers, _h.key);
                });
                methodHeaders && methodHeaders.forEach(function (h) {
                    var k = {};
                    if (typeof h.key === 'string')
                        k[h.key] = args[h.index];
                    else if (typeof h.key === 'function')
                        k = h.key.call(_this);
                    else
                        k = h.key;
                    extend(_headers, k);
                });
                var headers = new NgHeaders(_headers);
                var bodyParams = Reflect.getOwnMetadata(MetadataKeys.Body, target, targetKey), body = {};
                if (bodyParams) {
                    bodyParams = bodyParams.filter(function (p) { return args[p.index] !== undefined; });
                    if (bodyParams.some(function (p) { return args[p.index] instanceof File || args[p.index] instanceof FileList; })) {
                        body = new FormData;
                        bodyParams.forEach(function (p) {
                            var bodyArg = args[p.index];
                            if (bodyArg instanceof FileList)
                                for (var _i = 0, _a = bodyArg; _i < _a.length; _i++) {
                                    var f = _a[_i];
                                    body.append(p.key || 'files[]', f, f.name);
                                }
                            else if (bodyArg instanceof File)
                                body.append(p.key || 'files[]', bodyArg, bodyArg.name);
                            else
                                body.append(p.key || 'params[]', bodyArg);
                        });
                    }
                    else if (bodyParams.length === 1 && bodyParams[0].key === undefined)
                        body = args[bodyParams[0].index];
                    else {
                        bodyParams.map(function (p) {
                            return _a = {}, _a[p.key] = args[p.index], _a;
                            var _a;
                        }).forEach(function (p) { return Object.assign(body, p); });
                        body = JSON.stringify(body);
                    }
                }
                var responseType = Reflect.getOwnMetadata(MetadataKeys.Type, target, targetKey);
                var makeReq = function (method, baseUrl, requestUrl, headers, body, query, responseType) {
                    var options = new RequestOptions({ method: method, url: baseUrl + requestUrl, headers: headers, body: body, search: query, responseType: responseType });
                    return new Request(options);
                }, getCacheKey = function (url, headers, query, responseType) {
                    var headerArr = [];
                    headers.forEach(function (value, name) { return headerArr.push(name, headers.getAll(name).join()); });
                    return [url, headerArr.join(), query, responseType].join();
                };
                var baseUrlObs = this.getBaseUrl ? this.getBaseUrl() : Observable.of('');
                var observable = baseUrlObs
                    .flatMap(function (baseUrl) {
                    var cacheTime = Reflect.getOwnMetadata(MetadataKeys.Cache, target, targetKey);
                    if (cacheTime) {
                        var cacheMapKey = getCacheKey(baseUrl + requestUrl, headers, query, responseType), cacheMapEntry = cacheMap.get(cacheMapKey);
                        if (cacheMapEntry && (+new Date) < cacheMapEntry[0] + cacheTime)
                            observable = cacheMapEntry[1];
                        else {
                            observable = _this.http.request(makeReq(method, baseUrl, requestUrl, headers, body, query, responseType)).shareReplay();
                            cacheMap.set(cacheMapKey, [+new Date, observable]);
                        }
                    }
                    else
                        observable = _this.http.request(makeReq(method, baseUrl, requestUrl, headers, body, query, responseType)).share();
                    var errorHandler = Reflect.getOwnMetadata(MetadataKeys.Error, target.constructor);
                    errorHandler && (observable = observable.catch(errorHandler));
                    return observable;
                });
                return observable;
            };
            return descriptor;
        };
    };
};
export var GET = buildMethodDeco(RequestMethod.Get);
export var POST = buildMethodDeco(RequestMethod.Post);
export var PUT = buildMethodDeco(RequestMethod.Put);
export var DELETE = buildMethodDeco(RequestMethod.Delete);
export var HEAD = buildMethodDeco(RequestMethod.Head);
export var OPTIONS = buildMethodDeco(RequestMethod.Options);
export var PATCH = buildMethodDeco(RequestMethod.Patch);
export var NO_ENCODE = Symbol('apiClient:Query.noEncode');
//# sourceMappingURL=data:application/json;base64,